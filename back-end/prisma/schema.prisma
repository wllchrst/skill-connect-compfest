// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id
  name              String
  email             String    @unique
  password          String
  profilePicture    String    @default("")
  description       String    @default("")
  dateOfBirth       DateTime?
  language          String    @default("")
  createdAt         DateTime  @default(now())
  skill             String    @default("") @db.VarChar(500)
  currentEducation  String    @default("")
  experienceYears   Int       @default(-1)
  interest          String    @default("") @db.VarChar(500)
  learningResource  String    @default("") @db.VarChar(500)
  tools             String    @default("") @db.VarChar(500)
  filledInformation Boolean   @default(false)

  friends           Friend[]            @relation("FriendsOfCurrentUser")
  friendsOf         Friend[]            @relation("CurrentUserFriend")
  GroupMember       GroupMember[]
  CourseInteraction CourseInteraction[]
  ReceiverChat      PersonalChat[]      @relation("receiver")
  SenderChat        PersonalChat[]      @relation("sender")
  SenderGroupChat   GroupChat[]
}

model Friend {
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("FriendsOfCurrentUser", fields: [userId], references: [id])
  friend User @relation("CurrentUserFriend", fields: [friendId], references: [id])

  @@id([userId, friendId])
  @@unique([userId, friendId])
}

model Group {
  id          String   @id
  groupName   String
  description String   @default("")
  createdAt   DateTime @default(now())

  members   GroupMember[]
  GroupChat GroupChat[]
}

model GroupMember {
  id      String @id
  groupId String
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])
}

model Course {
  id          String @id
  title       String
  description String @db.VarChar(500)
  level       Float
  rating      Float
  link        String
  image       String

  CourseInteraction CourseInteraction[]
}

model CourseInteraction {
  id              String   @id
  userId          String
  courseId        String
  interactionType String
  timestamp       DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model PersonalChat {
  id         String   @id
  senderId   String
  receiverId String
  message    String
  timestamp  DateTime @default(now())

  Sender   User @relation(name: "sender", fields: [senderId], references: [id])
  Receiver User @relation(name: "receiver", fields: [receiverId], references: [id])
}

model GroupChat {
  id        String   @id
  senderId  String
  groupId   String
  message   String
  timestamp DateTime @default(now())

  Sender User  @relation(fields: [senderId], references: [id])
  Group  Group @relation(fields: [groupId], references: [id])
}
